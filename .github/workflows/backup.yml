name: Daily PocketBase Backup

on:
  schedule:
    - cron: '0 0 * * *'  # Executa todo dia à meia-noite
  workflow_dispatch:  # Permite execução manual

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create backup directory
        run: mkdir -p backups

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Create and download backup
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "Checking app status..."
          APP_STATUS=$(flyctl status -a campinho)
          if ! echo "$APP_STATUS" | grep -q "running"; then
            echo "App is not running. Starting it..."
            flyctl start -a campinho
            
            echo "Waiting for app to start..."
            for i in {1..30}; do
              if flyctl status -a campinho | grep -q "running"; then
                echo "App is now running"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "Timeout waiting for app to start"
                exit 1
              fi
              echo "Still waiting... ($i/30)"
              sleep 10
            done
          fi
          
          echo "Getting app instance..."
          APP_INSTANCE=$(flyctl status -a campinho | grep v1 | awk '{print $1}')
          echo "App instance: $APP_INSTANCE"
          
          echo "Creating backup directory in the app..."
          flyctl ssh console -a campinho -C "mkdir -p /pb_data/backup"
          
          echo "Creating backup file..."
          BACKUP_NAME="pb_backup_${{ steps.date.outputs.date }}.tar"
          flyctl ssh console -a campinho -C "cd /pb_data && tar cf backup/$BACKUP_NAME *.db migrations"
          
          echo "Downloading backup file..."
          TEMP_FILE="/tmp/$BACKUP_NAME"
          flyctl ssh sftp get -a campinho "/pb_data/backup/$BACKUP_NAME" "$TEMP_FILE"
          
          # Verificar se o download foi bem sucedido
          if [ ! -f "$TEMP_FILE" ]; then
            echo "Error: Download failed - file not created"
            exit 1
          fi
          
          # Verificar o tamanho do arquivo temporário
          TEMP_SIZE=$(stat -c%s "$TEMP_FILE" || stat -f%z "$TEMP_FILE")
          echo "Downloaded backup size: $TEMP_SIZE bytes"
          
          if [ "$TEMP_SIZE" -lt 1000000 ]; then
            echo "Error: Downloaded backup is suspiciously small (less than 1MB)"
            echo "Backup content preview:"
            head -c 1000 "$TEMP_FILE" | xxd  # Mostrar conteúdo em hexadecimal para debug
            exit 1
          fi
          
          echo "Compressing backup..."
          BACKUP_FILE="backups/pb_backup_${{ steps.date.outputs.date }}.tar.xz"
          # Usar compressão mais agressiva
          xz -9 -e -c "$TEMP_FILE" > "$BACKUP_FILE"
          
          # Verificar o tamanho do arquivo comprimido
          BACKUP_SIZE=$(stat -c%s "$BACKUP_FILE" || stat -f%z "$BACKUP_FILE")
          echo "Compressed backup size: $BACKUP_SIZE bytes"
          
          if [ "$BACKUP_SIZE" -lt 1000000 ]; then
            echo "Error: Compressed backup is suspiciously small (less than 1MB)"
            exit 1
          fi
          
          # Limpar arquivos temporários
          rm "$TEMP_FILE"
          flyctl ssh console -a campinho -C "rm /pb_data/backup/$BACKUP_NAME"

      - name: Clean old backups
        run: |
          # Manter apenas os últimos 3 backups
          cd backups
          ls -t pb_backup_*.tar.xz | tail -n +4 | xargs -r rm --
          cd ..

      - name: Commit and push backup with LFS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git lfs track "backups/*.tar.xz"  # Garantir que novos arquivos sejam rastreados
          git add backups/
          git add .gitattributes
          git commit -m "Backup automático - $(date +%Y-%m-%d)" || echo "No changes to commit"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY.git
          git push