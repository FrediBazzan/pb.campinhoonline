name: Daily PocketBase Backup

on:
  schedule:
    - cron: '0 0 * * *'  # Executa todo dia à meia-noite
  workflow_dispatch:  # Permite execução manual

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create backup directory
        run: mkdir -p backups

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Create and download backup
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "Getting volume ID..."
          VOLUME_ID=$(flyctl volumes list -a campinho | grep pb_data | awk '{print $1}')
          echo "Volume ID: $VOLUME_ID"
          
          echo "Creating snapshot for volume $VOLUME_ID..."
          flyctl volumes snapshots create $VOLUME_ID
          
          echo "Waiting for snapshot to complete..."
          sleep 30  # Dar tempo para o snapshot ser criado
          
          echo "Getting latest snapshot ID..."
          SNAPSHOT_INFO=$(flyctl volumes snapshots list $VOLUME_ID | grep created | head -n 1)
          SNAPSHOT_ID=$(echo "$SNAPSHOT_INFO" | awk '{print $1}')
          SNAPSHOT_SIZE=$(echo "$SNAPSHOT_INFO" | awk '{print $3}')
          echo "Latest snapshot: ID=$SNAPSHOT_ID, Size=$SNAPSHOT_SIZE bytes"
          
          echo "Downloading snapshot to temporary file..."
          # Primeiro baixar para um arquivo temporário sem compressão
          TEMP_FILE="/tmp/snapshot.tar"
          
          # Usar redirecionamento em vez de --file
          flyctl volumes snapshots download --verbose "$SNAPSHOT_ID" > "$TEMP_FILE"
          
          # Verificar se o download foi bem sucedido
          if [ ! -f "$TEMP_FILE" ]; then
            echo "Error: Download failed - file not created"
            exit 1
          fi
          
          # Verificar o tamanho do arquivo temporário
          TEMP_SIZE=$(stat -c%s "$TEMP_FILE" || stat -f%z "$TEMP_FILE")
          echo "Downloaded snapshot size: $TEMP_SIZE bytes"
          
          if [ "$TEMP_SIZE" -lt 1000000 ]; then
            echo "Error: Downloaded snapshot is suspiciously small (less than 1MB)"
            echo "Snapshot content preview:"
            head -c 1000 "$TEMP_FILE" | xxd  # Mostrar conteúdo em hexadecimal para debug
            exit 1
          fi
          
          echo "Compressing snapshot..."
          BACKUP_FILE="backups/pb_backup_${{ steps.date.outputs.date }}.tar.xz"
          # Usar compressão mais agressiva
          xz -9 -e -c "$TEMP_FILE" > "$BACKUP_FILE"
          
          # Verificar o tamanho do arquivo comprimido
          BACKUP_SIZE=$(stat -c%s "$BACKUP_FILE" || stat -f%z "$BACKUP_FILE")
          echo "Compressed backup size: $BACKUP_SIZE bytes"
          
          if [ "$BACKUP_SIZE" -lt 1000000 ]; then
            echo "Error: Compressed backup is suspiciously small (less than 1MB)"
            exit 1
          fi
          
          # Limpar arquivo temporário
          rm "$TEMP_FILE"

      - name: Clean old backups
        run: |
          # Manter apenas os últimos 3 backups
          cd backups
          ls -t pb_backup_*.tar.xz | tail -n +4 | xargs -r rm --
          cd ..

      - name: Commit and push backup with LFS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git lfs track "backups/*.tar.xz"  # Garantir que novos arquivos sejam rastreados
          git add backups/
          git add .gitattributes
          git commit -m "Backup automático - $(date +%Y-%m-%d)" || echo "No changes to commit"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY.git
          git push